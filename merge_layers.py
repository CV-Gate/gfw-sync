# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# merge_layers.py
# Created on: 2014-05-21 09:48:06.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------


import os
import glob

import arcpy

import archiver
import settings
import metadata


def create_field_map(layer_name, input_field_name, output_field_name):
  
    fm = arcpy.FieldMap()
    fm.addInputField(layer_name, input_field_name)
    output_field = fm.outputField
    output_field.name = output_field_name
    fm.outputField = output_field

    return fm


def empty_strings2null(fclass):
    desc = arcpy.Describe(fclass)
    if desc.dataType == 'FeatureClass':
        string_fields = [f.name for f in arcpy.ListFields(fclass, None, 'String')]
        for string_field in string_fields:
            arcpy.MakeFeatureLayer_management(fclass, "update_layer", '"%s" = \'\'' % string_field, "", "")
            arcpy.CalculateField_management("update_layer", string_field, "None", "PYTHON", "")


def export2shp(feature_class, fc_name, scratch_folder, s3_folder):

    # Export FeatureClass to Shapefile
    arcpy.FeatureClassToShapefile_conversion([feature_class], scratch_folder)

    # zip shapefile and push to Amazon S3 using archiver.py script
    target_shp = os.path.join(scratch_folder, "%s.shp" % fc_name)
    target_zip = os.path.join(scratch_folder, "%s.zip" % fc_name)
    #s3_zip = os.path.join("data", "%s.zip" % target_fc_name)  
    
    archiver.main(target_shp, target_zip, s3_folder)

    # clean up, delete shapefiles and zipfile
    targets_rm = os.path.join(scratch_folder, "%s.*" % fc_name)
    r = glob.glob(targets_rm)
    for i in r:
        os.remove(i)


def get_layer_def(layer_name, layer_defs):
    for layer in layer_defs:
        if layer == layer_name:
            return layer_defs[layer]
    return False


def remove_features(fc, countries):
    if not len(countries):
        # Deletes all features in target feature class
        arcpy.DeleteFeatures_management(fc)
    else:
        where_clause = ""
        for country in countries:
            if where_clause == "":
                where_clause = "country = '%s'" % country
            else:
                where_clause = "%s OR country = '%s'" % (where_clause, country)
            arcpy.MakeFeatureLayer_management(fc, "layer", where_clause)
            arcpy.DeleteFeatures_management("layer")

    # Compact target file-geodatabase to avoid running out of ObjectIDs
    arcpy.Compact_management(arcpy.env.workspace)


def remove_countries_from_description(desc, countries, layer_def):
    if not len(countries):
        elements = metadata.get_all_description_elements(desc)
        for element in elements:
            if element != "global":
                desc = metadata.remove_description_element(desc, element)
    else:
        for layer in layer_def['layers']:
            if layer_def['layers'][layer]['country'] in countries:
                desc = metadata.remove_description_element(desc, layer)
    return desc


def merge(layers, countries):

    sets = settings.get_settings()
    layer_defs = settings.get_layers()

    workspace = sets['paths']['workspace']
    scratchWorkspace = sets['paths']['scratch_workspace']
    arcpy.env.overwriteOutput = True

    for layer_name in layers:

        layer_def = get_layer_def(layer_name, layer_defs)

        if not layer_def:
            print "Layer %s does is not defined. Skip" % layer_name
            break

        arcpy.env.workspace = os.path.join(workspace, layer_def['gdb'])
        s3_drive = sets['bucket_drives'][layer_def['bucket']]
        s3_folder = os.path.join(s3_drive, layer_def['folder'])

        target_fc = layer_name
        target_shp = os.path.join(s3_folder, layer_name['shapefile'])
        remove_features(target_fc, countries)

        meta = os.path.join(scratchWorkspace,"%s.xml" % layer_name)

        meta_desc = metadata.get_metadata_description_element(meta)
        meta_desc = remove_countries_from_description(meta_desc, countries, layer_def)

        #remove countries from tags
        #remove countries from place keywords
        #remove countries from extent

        for l in layer_def['layers']:
            layer = layer_def['layers'][l]
            if layer['country'] in countries or not len(countries):

                print "Add %s" % layer['alias']

                arcpy.env.outputCoordinateSystem = arcpy.SpatialReference("WGS 1984 Web Mercator (auxiliary sphere)")
                if layer['transformation']:
                    arcpy.env.geographicTransformations = layer['transformation']

                input_fc = os.path.join(s3_folder, layer['shapefile'])
                input_layer = "input_layer"

                arcpy.MakeFeatureLayer_management(input_fc, input_layer, layer['where_clause'], "", "")

                fms = arcpy.FieldMappings()

                for field in layer['fields']:
                    if layer['fields'][field]:
                        if layer['fields'][field][0] == 'field':
                            fms.addFieldMap(create_field_map(input_layer, layer['fields'][field][1], field))

                # append layers to target feature class
                arcpy.Append_management(input_layer, target_fc, "NO_TEST", fms, "")

                print "Update fields"
                target_layer = "target_layer"
                arcpy.MakeFeatureLayer_management(target_fc, target_layer, "country IS NULL", "", "")

                for field in layer['fields']:
                    if layer['fields'][field]:

                        if layer['fields'][field][0].lower() == 'value':
                            arcpy.CalculateField_management(target_layer, field, "'%s'" % layer['fields'][field][1], "PYTHON", "")

                        elif layer['fields'][field][0].lower() == 'expression':
                            arcpy.CalculateField_management(target_layer, field, "%s" % layer['fields'][field][1], "PYTHON", "")

                arcpy.CalculateField_management(target_layer, "country", "'%s'" % layer['country'], "PYTHON", "")

                #convert empty strings ('') to NULL
                empty_strings2null(input_fc)

                #get country metadata description
                #update metadata description
                #update tags
                #update keywords
                #update extent

                #import country shapefile
                #place ZIP
















    update metadata

    export to shapefile (WGS)
    zip shapefile (WGS)
    zip shapefile (local proj)
    zip shapefile (local with date)

    copy shapefile S3
    copy all zip files (zip and archive)

    delete temp files


    ####

    layer_settings = sets.get_layers()
    settings = sets.get_settings()

    target_ws = settings['paths']['target_gdb']
    scratch_folder = settings['paths']['scratch_folder']

    for mlayer in mlayers:

        # import layers file given in system argument
        global input_fc

        layers = []
        for ls in layer_settings:
            if ls['name'] == mlayer:

                s3_bucket = ls['bucket']
                s3_folder = os.path.join(settings['bucket_drives'][s3_bucket], ls['folder'],"zip")
                
                for key in ls.keys():
                    if key != 'name' and key != 'bucket' and key != 'folder':
                        layers.append(ls[key])

        if not len(layers):
            print "Warning: Layer %s is not defined" % mlayer
            break

        # get layers config

        target_fc_name = "gfw_%s" % mlayer

        #define name for target feature class and target feature layers
        target_fc = os.path.join(target_ws, target_fc_name)
        target_layer = '%s_layer' % target_fc_name

        # set environment parameters
        arcpy.env.overwriteOutput = True


        if not len(mcountries):
            # Deletes all features in target feature class
            arcpy.DeleteFeatures_management(target_fc)
        else:
            where_clause = ""
            for country in mcountries:
                if where_clause == "":
                    where_clause = "country = '%s'" % country
                else:
                    where_clause = "%s OR country = '%s'" % (where_clause, country)
            arcpy.MakeFeatureLayer_management(target_fc, "replace_layer", where_clause)
            arcpy.DeleteFeatures_management("replace_layer")

        # Compact target file-geodatabase to avoid running out of ObjectIDs
        arcpy.Compact_management(target_ws)

        #Add features, one layers at a time
        for layer in layers:
            
            if (layer['country'] in mcountries) or (not len(mcountries)):

                #Set output coordinate system to Web Mercator
                #All ESRI web services are published using this projection
                arcpy.env.outputCoordinateSystem = arcpy.SpatialReference("WGS 1984 Web Mercator (auxiliary sphere)")

                print "Adding " + os.path.basename(layer['full_path'])

                # define transformation
                if layer['transformation']:
                    arcpy.env.geographicTransformations = layer['transformation']

                # create feature layers from feature class

                input_fc = layer['full_path']

                input_layer = os.path.basename('%s_layer') % input_fc

                arcpy.MakeFeatureLayer_management(input_fc,
                                                  input_layer,
                                                  layer['where_clause'],
                                                  "",
                                                  "")

                # map fields
                fms = arcpy.FieldMappings()

                for field in layer['fields']:
                    if layer['fields'][field]:
                        if layer['fields'][field][0] == 'field':
                            fms.addFieldMap(create_field_map(input_layer, layer, field))

                # append layers to target feature class
                arcpy.Append_management(input_layer,
                                        target_fc,
                                        "NO_TEST",
                                        fms,
                                        "")

                # Update field values, for un-mapped fields

                print "Update fields"
                arcpy.MakeFeatureLayer_management(target_fc,
                                                  target_layer,
                                                  "country IS NULL",
                                                  "",
                                                  "")

                #This is a work around. Features in layers get unselected after update of the country field. Better to select them by ID
                id_field = "OBJECTID"
                min_id = arcpy.SearchCursor(target_layer, "", "", "", id_field + " A").next().getValue(id_field) #Get 1st row in ascending cursor sort
                max_id = arcpy.SearchCursor(target_layer, "", "", "", id_field + " D").next().getValue(id_field) #Get 1st row in descending cursor sort
                arcpy.MakeFeatureLayer_management(target_fc,
                                                  target_layer,
                                                  "OBJECTID >= %s AND OBJECTID <= %s" % (min_id, max_id),
                                                  "",
                                                  "")

                arcpy.CalculateField_management(target_layer, "country", "'%s'" % layer['country'], "PYTHON", "")

                for field in layer['fields']:
                    if layer['fields'][field]:

                        if layer['fields'][field][0].lower() == 'value':
                            arcpy.CalculateField_management(target_layer, field, "'%s'" % layer['fields'][field][1], "PYTHON", "")

                        elif layer['fields'][field][0].lower() == 'expression':
                            arcpy.CalculateField_management(target_layer, field, "%s" % layer['fields'][field][1], "PYTHON", "")

                #convert empty strings ('') to NULL
                empty_strings2null(input_fc)

                fc_name = os.path.basename(input_fc).split('.')[0]


                fc_copy = os.path.join(target_ws, mlayer, fc_name)

                if arcpy.Exists(fc_copy):
                    arcpy.Delete_management(fc_copy)
                arcpy.FeatureClassToFeatureClass_conversion(input_fc, os.path.join(target_ws,mlayer), fc_name)


                #Set output coordinate system to local projection
                #Shape files on S3 for country layers are published in their original projection

                desc = arcpy.Describe(input_fc)
                arcpy.env.outputCoordinateSystem = desc.spatialReference
                export2shp(input_fc, fc_name, scratch_folder, s3_folder)

                #Reset Transformation
                arcpy.env.geographicTransformations = ""





        #Set Output coordinate System to WGS 1984 for S3 Archive
        #Vizzuality will download from here and needs the date in Lat/Lon

        arcpy.env.outputCoordinateSystem = arcpy.SpatialReference("WGS 1984")

        export2shp(target_fc, target_fc_name, scratch_folder, s3_folder)




