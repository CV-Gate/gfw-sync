# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# merge_layers.py
# Created on: 2014-05-21 09:48:06.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------


import os
import glob
import arcpy
import xml.etree.ElementTree as ET
import archiver
import settings
import metadata


def create_field_map(layer_name, input_field_name, output_field_name):
  
    fm = arcpy.FieldMap()
    fm.addInputField(layer_name, input_field_name)
    output_field = fm.outputField
    output_field.name = output_field_name
    fm.outputField = output_field

    return fm


def empty_strings2null(fclass):
    desc = arcpy.Describe(fclass)
    if desc.dataType == 'FeatureClass':
        string_fields = [f.name for f in arcpy.ListFields(fclass, None, 'String')]
        for string_field in string_fields:
            arcpy.MakeFeatureLayer_management(fclass, "update_layer", '"%s" = \'\'' % string_field, "", "")
            arcpy.CalculateField_management("update_layer", string_field, "None", "PYTHON", "")



def get_layer_def(layer_name, layer_defs):
    for layer in layer_defs:
        if layer == layer_name:
            return layer_defs[layer]
    return False


def remove_features(fc, countries):
    if not len(countries):
        # Deletes all features in target feature class
        arcpy.DeleteFeatures_management(fc)
    else:
        where_clause = ""
        for country in countries:
            if where_clause == "":
                where_clause = "country = '%s'" % country
            else:
                where_clause = "%s OR country = '%s'" % (where_clause, country)
            arcpy.MakeFeatureLayer_management(fc, "layer", where_clause)
            arcpy.DeleteFeatures_management("layer")

    # Compact target file-geodatabase to avoid running out of ObjectIDs
    arcpy.Compact_management(arcpy.env.workspace)


def get_all_description_elements(desc):
    elements = []
    root = ET.fromstring(desc)
    for parent in root.findall("DIV"):
        for element in parent.findall("DIV"):
            if "ID" in element.attrib:
                elements.append(element.attrib["ID"])
    return elements


def get_description_text(desc):
    root = ET.fromstring(desc)
    for parent in root.findall("DIV"):
        for element in parent.findall("DIV"):
            if element.find("P"):
                return ET.tostring(element)[5:-6]


def remove_description_element(desc, desc_attrib):
    root = ET.fromstring(desc)
    for parent in root.findall("DIV"):
        for element in parent.findall("DIV"):
            if "ID" in element.attrib:
                if element.attrib["ID"] == desc_attrib:
                    print ET.tostring(element)
                    parent.remove(element)
    desc = ET.tostring(root)
    return desc


def remove_countries_from_description(desc, countries, layer_def):
    if not len(countries):
        elements = get_all_description_elements(desc)
        for element in elements:
            if element != "global":
                desc = remove_description_element(desc, element)
    else:
        for layer in layer_def['layers']:
            if layer_def['layers'][layer]['country'] in countries:
                desc = remove_description_element(desc, layer)
    return desc


def append_description_element(desc, attrib, text):
    root = ET.fromstring(desc)
    for element in root.findall("DIV"):
        if not len(element.attrib):
            desc_element = ET.SubElement(element, "DIV")
            desc_element.attrib['ID'] = attrib
            desc_element.text = text
            break
    desc = ET.tostring(root)
    print desc


def remove_countries_from_place_keywords(keywords, countries):
    if not len(countries):
        return []
    else:
        return keywords


def add_country_to_place_keywords(keywords, country):
    iso3 = settings.get_country_iso3_list()
    if country.upper() in iso3:
        if not iso3[country].lower() in keywords:
            keywords.append(iso3[country].lower())
    return keywords


def update_tags(tags, countries):
    for country in countries:
        tags = tags + [country.lower()]
    return tags


def update_extent_desc(countries):
    extent_desc = "Currently available for "
    i = 0
    for country in countries:
        i += 1
        if i < len(countries):
            extent_desc = extent_desc + country + ", "
        else:
            extent_desc = extent_desc + "and " + country
    return extent_desc


def import_shapefile(shp, gdb, fc):
    arcpy.env.workspace = gdb
    if arcpy.Exists(fc):
        arcpy.Delete_management(fc)
    arcpy.FeatureClassToFeatureClass_conversion(shp, gdb, fc)


def merge(layers, countries):

    sets = settings.get_settings()
    layer_defs = settings.get_layers()

    workspace = sets['paths']['workspace']
    scratch_workspace = sets['paths']['scratch_workspace']

    default_srs = sets['spatial_references']['default_srs']
    gdb_srs = sets['spatial_references']['gdb_srs']

    arcpy.env.overwriteOutput = True

    for layer_name in layers:

        layer_def = get_layer_def(layer_name, layer_defs)

        if not layer_def:
            print "Layer %s does is not defined. Skip" % layer_name
            break

        gdb = os.path.join(workspace, layer_def['gdb'])
        arcpy.env.workspace = gdb
        drive = sets['bucket_drives'][layer_def['bucket']]
        layer_folder = os.path.join(drive, layer_def['folder'])
        zip_folder = os.path.join(layer_folder, sets['folders']['zip_folder'])
        archive_folder = os.path.join(layer_folder, sets['folders']['archive_folder'])

        target_fc = layer_name
        target_shp = os.path.join(layer_folder, layer_def['shapefile'])

        metadata_keys = settings.get_metadata_keys()
        meta = metadata.get_metadata_file(target_fc)

        meta_desc = metadata.get_metadata_element_by_etree(meta, metadata_keys["ARCGIS"]["description"])
        meta_extent_desc = metadata.get_metadata_element_by_etree(meta, metadata_keys["ARCGIS"]["extent_description"])
        meta_tags = layer_def["keywords"]
        meta_place_keywords = metadata.get_metadata_element_by_etree(meta, metadata_keys["ARCGIS"]["place_keywords"])


        remove_features(target_fc, countries)
        meta_desc = remove_countries_from_description(meta_desc, countries, layer_def)
        meta_place_keywords = remove_countries_from_place_keywords(meta_place_keywords, countries)

        for l in layer_def['layers']:
            layer = layer_def['layers'][l]
            if layer['country'] in countries or not len(countries):

                print "Add %s" % layer['alias']

                arcpy.env.outputCoordinateSystem = gdb_srs

                if layer['transformation']:
                    arcpy.env.geographicTransformations = layer['transformation']

                input_fc = os.path.join(layer_folder, layer['shapefile'])
                input_layer = "input_layer"

                arcpy.MakeFeatureLayer_management(input_fc, input_layer, layer['where_clause'], "", "")

                fms = arcpy.FieldMappings()

                for field in layer['fields']:
                    if layer['fields'][field]:
                        if layer['fields'][field][0] == 'field':
                            fms.addFieldMap(create_field_map(input_layer, layer['fields'][field][1], field))

                # append layers to target feature class
                arcpy.Append_management(input_layer, target_fc, "NO_TEST", fms, "")

                print "Update fields"
                target_layer = "target_layer"
                arcpy.MakeFeatureLayer_management(target_fc, target_layer, "country IS NULL", "", "")

                for field in layer['fields']:
                    if layer['fields'][field]:

                        if layer['fields'][field][0].lower() == 'value':
                            arcpy.CalculateField_management(target_layer, field, "'%s'" % layer['fields'][field][1], "PYTHON", "")

                        elif layer['fields'][field][0].lower() == 'expression':
                            arcpy.CalculateField_management(target_layer, field, "%s" % layer['fields'][field][1], "PYTHON", "")

                arcpy.CalculateField_management(target_layer, "country", "'%s'" % layer['country'], "PYTHON", "")

                #convert empty strings ('') to NULL
                empty_strings2null(input_fc)

                country_meta = metadata.get_metadata_file(input_fc)
                country_meta_desc = metadata.get_metadata_element_by_etree(country_meta, metadata_keys["ARCGIS"]["description"])
                country_meta_desc = get_description_text(country_meta_desc)

                meta_desc = append_description_element(meta_desc, l, country_meta_desc)
                meta_place_keywords = add_country_to_place_keywords(meta_place_keywords, layer['country'])

                import_shapefile(input_fc, gdb, l)

                #archive local shapefile
                archiver.archive_shapefile(input_fc, scratch_workspace, zip_folder, archive_folder, True)

                arcpy.env.outputCoordinateSystem = arcpy.SpatialReference(default_srs)
                # Export FeatureClass to Shapefile
                arcpy.FeatureClassToShapefile_conversion([input_fc], scratch_workspace)
                export_shp = os.path.join(scratch_workspace, layer['shapefile'])
                archiver.archive_shapefile(export_shp, scratch_workspace, zip_folder, archive_folder, False)

        meta_tags = update_tags(meta_tags, meta_place_keywords)
        meta_extent_desc = update_extent_desc(meta_place_keywords)

        meta = metadata.update_metadata_element(meta, metadata_keys["ARCGIS"]["description"], meta_desc)
        meta = metadata.update_metadata_element(meta, metadata_keys["ARCGIS"]["extent_description"], meta_extent_desc)

        meta = metadata.update_metadata_elements(meta, metadata_keys["ARCGIS"]["tags"], meta_tags)
        meta = metadata.update_metadata_elements(meta, metadata_keys["ARCGIS"]["place_keywords"], meta_place_keywords)

        metadata.import_metadata(target_fc, meta)

        arcpy.env.geographicTransformations = ""

        arcpy.env.outputCoordinateSystem = arcpy.SpatialReference(default_srs)
        arcpy.FeatureClassToShapefile_conversion(target_fc, layer_folder, layer_def['shapefile'])
        archiver.archive_shapefile(target_shp, scratch_workspace, zip_folder, archive_folder, False)

        arcpy.env.outputCoordinateSystem = arcpy.SpatialReference(gdb_srs)
        arcpy.FeatureClassToShapefile_conversion(target_fc, scratch_workspace, layer_def['shapefile'])
        export_shp = os.path.join(scratch_workspace, layer_def['shapefile'])
        archiver.archive_shapefile(export_shp, scratch_workspace, zip_folder, archive_folder, True)

        files = glob.glob(os.path.join(scratch_workspace, "*.*"))
        for f in files:
            os.remove(f)