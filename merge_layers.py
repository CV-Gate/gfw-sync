# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# merge_layers.py
# Created on: 2014-05-21 09:48:06.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------


import arcpy
import os
import archiver
import glob
import sys
import traceback
import string
import urllib

from config import settings as set


def create_field_map(input_name, layer, field):
  
    fm = arcpy.FieldMap()
    fm.addInputField(input_name, layer['fields'][field][1])
    output_field = fm.outputField
    output_field.name = field
    fm.outputField = output_field

    return fm


def empty_strings2null(fclass):
    desc = arcpy.Describe(fclass)
    if desc.dataType == 'FeatureClass':
        string_fields = [f.name for f in arcpy.ListFields(fclass, None, 'String')]
        for string_field in string_fields:
            arcpy.MakeFeatureLayer_management(fclass,
                                              "update_layer",
                                              '"%s" = \'\'' % string_field,
                                              "",
                                              "")
            arcpy.CalculateField_management("update_layer", string_field, "None", "PYTHON", "")


def export2shp(feature_class, fc_name, scratch_folder, s3_folder):

    # Export FeatureClass to Shapefile
    arcpy.FeatureClassToShapefile_conversion([feature_class], scratch_folder)

    # zip shapefile and push to Amazon S3 using archiver.py script
    target_shp = os.path.join(scratch_folder, "%s.shp" % fc_name)
    target_zip = os.path.join(scratch_folder, "%s.zip" % fc_name)
    #s3_zip = os.path.join("data", "%s.zip" % target_fc_name)  
    
    archiver.main(target_shp, target_zip, s3_folder)

    # clean up, delete shapefiles and zipfile
    targets_rm = os.path.join(scratch_folder, "%s.*" % fc_name)
    r = glob.glob(targets_rm)
    for i in r:
        os.remove(i)



def merge(mlayers, mcountries):

    layer_settings = set.get_layers()
    settings = set.get_settings()

    target_ws = settings['paths']['target_gdb']
    scratch_folder = settings['paths']['scratch_folder']

    for mlayer in mlayers:

        # import layer file given in system argument
        global input_fc

        layers = []
        for ls in layer_settings:
            if ls['name'] == mlayer:

                s3_bucket = ls['bucket']
                s3_folder = os.path.join("F:\\", ls['folder'],"zip")
                
                for key in ls.keys():
                    if key != 'name' and key != 'bucket' and key != 'folder':
                        layers.append(ls[key])

        if not len(layers):
            print "Warning: Layer %s is not defined" % mlayer
            break

        # get layer settings

        target_fc_name = "gfw_%s" % mlayer

        #define name for target feature class and target feature layer
        target_fc = os.path.join(target_ws, target_fc_name)
        target_layer = '%s_layer' % target_fc_name

        # set environment parameters
        arcpy.env.overwriteOutput = True


        if not len(mcountries):
            # Deletes all features in target feature class
            arcpy.DeleteFeatures_management(target_fc)
        else:
            where_clause = ""
            for country in mcountries:
                if where_clause == "":
                    where_clause = 'country = %s' % country
                else:
                    where_clause = '%s OR country = %s' % (where_clause, country)
            arcpy.MakeFeatureLayer_management(target_fc, "replace_layer", where_clause)
            arcpy.DeleteFeatures_management("replace_layer")

        # Compact target file-geodatabase to avoid running out of ObjectIDs
        arcpy.Compact_management(target_ws)

        #Add features, one layer at a time
        for layer in layers:
            
            if (layer['country'] in mcountries) or (not len(mcountries)):

                #Set output coordinate system to Web Mercator
                #All ESRI web services are published using this projection
                arcpy.env.outputCoordinateSystem = arcpy.SpatialReference("WGS 1984 Web Mercator (auxiliary sphere)")

                print "Adding " + os.path.basename(layer['full_path'])

                # define transformation
                if layer['transformation']:
                    arcpy.env.geographicTransformations = layer['transformation']

                # create feature layer from feature class

                input_fc = layer['full_path']

                input_layer = os.path.basename('%s_layer') % input_fc

                arcpy.MakeFeatureLayer_management(input_fc,
                                                  input_layer,
                                                  layer['where_clause'],
                                                  "",
                                                  "")

                # map fields
                fms = arcpy.FieldMappings()

                for field in layer['fields']:
                    if layer['fields'][field]:
                        if layer['fields'][field][0] == 'field':
                            fms.addFieldMap(create_field_map(input_layer, layer, field))

                # append layer to target feature class
                arcpy.Append_management(input_layer,
                                        target_fc,
                                        "NO_TEST",
                                        fms,
                                        "")

                # Update field values, for un-mapped fields

                print "Update fields"
                arcpy.MakeFeatureLayer_management(target_fc,
                                                  target_layer,
                                                  "country IS NULL",
                                                  "",
                                                  "")

                arcpy.CalculateField_management(target_layer, "country", "'%s'" % layer['country'], "PYTHON", "")

                for field in layer['fields']:
                    if layer['fields'][field]:

                        if layer['fields'][field][0].lower() == 'value':
                            arcpy.CalculateField_management(target_layer, field, "'%s'" % layer['fields'][field][1], "PYTHON", "")

                        elif layer['fields'][field][0].lower() == 'expression':
                            arcpy.CalculateField_management(target_layer, field, "%s" % layer['fields'][field][1], "PYTHON", "")

                #convert empty strings ('') to NULL
                empty_strings2null(input_fc)

                fc_name = os.path.basename(input_fc).split('.')[0]


                fc_copy = os.path.join(target_ws, mlayer, fc_name)

                if arcpy.Exists(fc_copy):
                    arcpy.Delete_management(fc_copy)
                arcpy.FeatureClassToFeatureClass_conversion(input_fc, os.path.join(target_ws,mlayer), fc_name)


                #Set output coordinate system to local projection
                #Shape files on S3 for country layers are published in their original projection

                desc = arcpy.Describe(input_fc)
                arcpy.env.outputCoordinateSystem = desc.spatialReference
                export2shp(input_fc, fc_name, scratch_folder, s3_folder)

                #Reset Transformation
                arcpy.env.geographicTransformations = ""





        #Set Output coordinate System to WGS 1984 for S3 Archive
        #Vizzuality will download from here and needs the date in Lat/Lon

        arcpy.env.outputCoordinateSystem = arcpy.SpatialReference("WGS 1984")

        export2shp(target_fc, target_fc_name, scratch_folder, s3_folder)




