# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# merge_country_layers.py
# Created on: 2014-05-21 09:48:06.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import os

#Target workspace and name of taget feature class
#Target workspace should be a file-geodatabase

target_ws = "C:\\Users\\Thomas.Maschler\\Documents\\test.gdb"
target_fc_name = "logging"

#Define country specific parameters
#Follow the same schema to add new country layers

cmr = {
    'input_ws': "C:\\Users\\Thomas.Maschler\\Documents\\Atlas\\CMR\\CMR_Atlas 2014 data.gdb\\Forest_management",  # full path to input workspace, escape backslashes (\) with another backslash
    'input_fc_name': "CMR_ufa_2014",  # input feature_class name
    'country_code': "CMR",  # use three letter country code (http://en.wikipedia.org/wiki/ISO_3166-1)
    'layer_type': "FMU",  # feature type, use when fields{'type'] is None, otherwise type None
    'where_clause': "VALIDITE = 'V'",  # to use entire dataset type "", string expressions within the where clause must be with single quotes
    'transformation': "",  # specify geographic transformation (if necessary, otherwise type ""). Features will be projected to WGS_1984_Web_Mercator_Auxiliary_Sphere
    'fields': {
        'type': "",  # if field is not provided type ""
        'company': "ATTRIBUTAI",  # if field is provided type field name (case sensitive!)
        'group': "GROUPE_PAR",  # if field is provided type field name (case sensitive!)
        'area': "SUP_SIG",  # if field is provided type field name (case sensitive!)
        'shape_length': "Shape_Length",  # if field is provided type field name (case sensitive!)
        'shape_area': "Shape_Area"  # if field is provided type field name (case sensitive!)
    }
}

gab = {
    'input_ws': "C:\\Users\\Thomas.Maschler\\Documents\\Atlas\\GAB\\gabon_2013.gdb\\amenagement_forestier",  # full path to input workspace, escape backslashes (\) with another backslash
    'input_fc_name': "gab_CFAD",  # input feature_class name
    'country_code': "GAB",  # use three letter country code (http://en.wikipedia.org/wiki/ISO_3166-1)
    'layer_type': "CFAD",  # feature type, use when fields{'type'] is None, otherwise type ""
    'where_clause': "",  # to use entire dataset type "", string expressions within the where clause must be with single quotes
    'transformation': "",  # specify geographic transformation (if necessary, otherwise type ""). Features will be projected to WGS_1984_Web_Mercator_Auxiliary_Sphere
    'fields': {
        'type': "",  # if field is not provided type ""
        'company': "nom_ste",  # if field is provided type field name (case sensitive!)
        'group': "grp_ste",  # if field is provided type field name (case sensitive!)
        'area': "sup_sig",  # if field is provided type field name (case sensitive!)
        'shape_length': "Shape_Length",  # if field is provided type field name (case sensitive!)
        'shape_area': "Shape_Area"  # if field is provided type field name (case sensitive!)
    }
}


#Add country to country-list
countries = [cmr, gab]

#define name for target feature class and target feature layer
target_fc = os.path.join(target_ws, target_fc_name)
target_layer = '%s_layer' % target_fc_name


arcpy.env.overwriteOutput = True
arcpy.env.outputCoordinateSystem = arcpy.SpatialReference("WGS 1984 Web Mercator (auxiliary sphere)")


# Process: Delete Features
# Deletes all features in target feature class
arcpy.DeleteFeatures_management(target_fc)

# Process: Compact
# Compact target file-geodatabase to avoid running out of ObjectIDs
arcpy.Compact_management(target_ws)

#Add features, one country at a time

for country in countries:
    if country['transformation']:
        arcpy.env.geographicTransformations = country['transformation']
    # Process: Make Feature Layer
    input_fc  = os.path.join(country['input_ws'], country['input_fc_name'])
    input_layer = os.path.basename('%s_layer') % input_fc

    arcpy.MakeFeatureLayer_management(input_fc,
                                      input_layer,
                                      country['where_clause'],
                                      "",
                                      "")

    # Process: Append

    if country['fields']['type']:
        ftype = "type \"type\" true true false 50 Text 0 0 ,First,#,%(input_fc)s,%(type)s,-1,-1;" % {
            'input_fc': input_fc, 'type': country['fields']['type']}
    else:
        ftype = "type \"type\" true true false 50 Text 0 0 ,First,#;"

    if country['fields']['company']:
        fcompany = "company \"company\" true true false 50 Text 0 0 ,First,#,%(input_fc)s,%(company)s,-1,-1;" % {
            'input_fc': input_fc, 'company': country['fields']['company']}
    else:
        fcompany = "company \"company\" true true false 50 Text 0 0 ,First,#;"

    if country['fields']['company']:
        fgroup = "comp_group \"group\" true true false 50 Text 0 0 ,First,#,%(input_fc)s,%(group)s,-1,-1;" % {
            'input_fc': input_fc, 'group': country['fields']['group']}
    else:
        fgroup = "comp_group \"group\" true true false 50 Text 0 0 ,First,#;"

    if country['fields']['area']:
        farea = "area \"area\" true true false 4 Long 0 0 ,First,#,%(input_fc)s,%(area)s,-1,-1;" % {
            'input_fc': input_fc, 'area': country['fields']['area']}
    else:
        farea = "area \"area\" true true false 4 Long 0 0 ,First,#;"

    if country['fields']['shape_length']:
        fshape_length = "SHAPE_Length \"SHAPE_Length\" false true true 8 Double 0 0 ,First,#,%(input_fc)s,%(shape_length)s,-1,-1;" % {
            'input_fc': input_fc, 'shape_length': country['fields']['shape_length']}
    else:
        fshape_length = "SHAPE_Length \"SHAPE_Length\" false true true 8 Double 0 0 ,First,#;"

    if country['fields']['shape_area']:
        fshape_area = "SHAPE_Area \"SHAPE_Area\" false true true 8 Double 0 0 ,First,#,%(input_fc)s,%(shape_area)s,-1,-1;" % {
            'input_fc': input_fc, 'shape_area': country['fields']['shape_area']}
    else:
        fshape_area = "SHAPE_Area \"SHAPE_Area\" false true true 8 Double 0 0 ,First,#;"

    arcpy.Append_management(input_layer,
                            target_fc,
                            "NO_TEST",
                            "%(ftype)s" \
                            "country \"country\" true true false 50 Text 0 0 ,First,#;" \
                            "%(fcompany)s" \
                            "%(fgroup)s" \
                            "%(farea)s" \
                            "%(fshape_length)s" \
                            "%(fshape_area)s" %
                            {'ftype': ftype,
                             'fcompany': fcompany,
                             'fgroup': fgroup,
                             'farea': farea,
                             'fshape_length': fshape_area,
                             'fshape_area': fshape_area},
                            "")

    # Process: Make Feature Layer
    # Select added features
    arcpy.MakeFeatureLayer_management(target_fc,
                                      target_layer,
                                      "country IS NULL",
                                      "",
                                      "")

    # Process: Calculate Field
    # Add country code to selected features
    arcpy.CalculateField_management(target_layer, "country", "'%s'" % country['country_code'], "PYTHON", "")

    # Process: Calculate Field
    # Add feature type to selected features if no type field was provided
    if not(country['fields']['type']) and country['layer_type']:
        arcpy.CalculateField_management(target_layer, "type", "'%s'" % country['layer_type'], "PYTHON", "")

    arcpy.env.geographicTransformations = ""


# Execute FeatureClassToShapefile_conversion
# Export FeatureClass to Shapefile

scratch_folder = "C:\\temp"
arcpy.FeatureClassToShapefile_conversion([target_fc], scratch_folder)

